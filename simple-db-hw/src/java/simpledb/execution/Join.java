package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

import javax.swing.plaf.basic.BasicInternalFrameTitlePane.SystemMenuBar;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private final JoinPredicate predicate;
    private OpIterator outerIterator;
    private OpIterator innerIterator;
    private Tuple outerTuple;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
    	predicate = p;
    	outerIterator = child1;
    	innerIterator = child2;
        outerTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
    	return getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
    	return getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
		// some code goes here
        return TupleDesc.merge(outerIterator.getTupleDesc(), innerIterator.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	outerIterator.open();
    	innerIterator.open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	outerIterator.close();
    	innerIterator.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	outerIterator.rewind();
    	innerIterator.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	if(outerTuple == null) {
    		outerTuple = outerIterator.next();
    	}
    	
        while(true) {
        	while(innerIterator.hasNext()) {
        		Tuple innerTuple = innerIterator.next();
        		if(predicate.filter(outerTuple, innerTuple))
        		{
        			TupleDesc tDesc = getTupleDesc();
        			Tuple resTuple = new Tuple(tDesc);
        			int cursor = 0;
        			for(int i=0;i<outerTuple.getTupleDesc().numFields();i++) {
        				resTuple.setField(cursor, outerTuple.getField(i));
        				cursor++;
        			}
        			for(int j=0;j<innerTuple.getTupleDesc().numFields();j++) {
        				resTuple.setField(cursor, innerTuple.getField(j));
        				cursor++;
        			}
        			return resTuple;
        		}
        	}
        	innerIterator.rewind();
        	if(!outerIterator.hasNext()) {
        		break;
        	}else {
        		outerTuple = outerIterator.next();
        	}
        }
        
    	return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
    	OpIterator[] opIterators = new OpIterator[2];
    	opIterators[0] = outerIterator;
    	opIterators[1] = innerIterator;
        return opIterators;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    	outerIterator = children[0];
    	innerIterator = children[1];
    }

}
